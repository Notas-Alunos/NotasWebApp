# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow performs a static analysis of your source code using
# Red Hat CodeReady Dependency Analytics.

# Scans are triggered:
# 1. On every push to default and protected branches
# 2. On every Pull Request targeting the default branch
# 3. On a weekly schedule
# 4. Manually, on demand, via the "workflow_dispatch" event

# üíÅ The CRDA Starter workflow will:
# - Checkout your repository
# - Setup the required tool stack
# - Install the CRDA command line tool
# - Auto detect the manifest file and install the project's dependencies
# - Perform the security scan using CRDA
# - Upload the SARIF result to the GitHub Code Scanning which can be viewed under the security tab
# - Optionally upload the SARIF file as an artifact for the future reference

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Setup the tool stack based on the project's requirement.
#    Refer to: https://github.com/redhat-actions/crda/#1-set-up-the-tool-stack
# 2. (Optional) CRDA action attempt to detect the language and install the
#    required dependencies for your project. If your project doesn't aligns
#    with the default dependency installation command mentioned here
#    https://github.com/redhat-actions/crda/#3-installing-dependencies.
#    Use the required inputs to setup the same
# 3. (Optional) CRDA action attempts to detect the manifest file if it is
#    present in the root of the project and named as per the default mentioned
#    here https://github.com/redhat-actions/crda/#3-installing-dependencies.
#    If it deviates from the default, use the required inputs to setup the same
# 4. Setup Authentication - Create the CRDA_KEY or SNYK_TOKEN.
#    Refer to: https://github.com/redhat-actions/crda/#4-set-up-authentication
# 5. (Optional) Upload SARIF file as an Artifact to download and view
# 6. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: CRDA Scan

# Controls when the workflow will run
on:
  # TODO: Customize trigger events based on your DevSecOps processes
  #
  # This workflow is made to run with OpenShift starter workflow
  # https://github.com/actions/starter-workflows/blob/main/deployments/openshift.yml
  # However, if you want to run this workflow as a standalone workflow, please
  # uncomment the 'push' trigger below and configure it based on your requirements.
  #
  workflow_call:
    secrets:
      CRDA_KEY:
        required: false
      SNYK_TOKEN:
        required: false
  workflow_dispatch:

  # push:
  #   branches: [ "main" ]

  # pull_request_target is used to securely share secret to the PR's workflow run.
  # For more info visit: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target
  pull_request_target:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  crda-scan:
    permissions:
      contents: read            # for actions/checkout to fetch code
      security-events: write    # for redhat-actions/crda to upload SARIF results
      issues: write
    name: Scan project vulnerabilities with CRDA
    runs-on: ubuntu-latest
    steps:
      # 1) Gate: s√≥ roda se o PR tiver o label ok-to-scan
      - name: Gate ‚Äî exigir label de aprova√ß√£o
        id: gate
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const okLabel = 'ok-to-scan';
            const { owner, repo } = context.repo;
            const pr = context.payload.number;

            const labels = await github.rest.issues.listLabelsOnIssue({ owner, repo, issue_number: pr });
            const has = labels.data.some(l => l.name === okLabel);
            core.setOutput('approved', has ? 'true' : 'false');

            if (!has) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr,
                body:
                  `‚ö†Ô∏è Seguran√ßa: adicione o label **${okLabel}** para autorizar o scan com secrets.\n\n` +
                  `> Dica: mantenedores podem aplicar esse label quando o PR for confi√°vel.`
              });
            }

      # 2) Checkout do HEAD do PR (inclusive forks) ‚Äî s√≥ ap√≥s aprova√ß√£o
      - name: Check out PR HEAD (ap√≥s aprova√ß√£o)
        if: steps.gate.outputs.approved == 'true'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      # (Opcional) Setup de linguagem do projeto aqui (Node/Java/Python/Go) ‚Äî tamb√©m pinado por SHA

      # 3) Instalar a CLI do CRDA
      - name: Install CRDA CLI
        if: steps.gate.outputs.approved == 'true'
        uses: redhat-actions/openshift-tools-installer@144527c7d98999f2652264c048c7a9bd103f8a82
        with:
          source: github
          github_pat: ${{ github.token }}
          crda: "latest"

      # 4) Rodar o scan (gera SARIF em Security > Code scanning)
      - name: CRDA Scan
        if: steps.gate.outputs.approved == 'true'
        uses: redhat-actions/crda@6310ee94a6ac8f76b4152b7267c6cd7f1277052c
        with:
          crda_key: ${{ secrets.CRDA_KEY }}
          # snyk_token: ${{ secrets.SNYK_TOKEN }}
          # upload_artifact: false

      # 5) Coment√°rio de status no PR
      - name: Comentar status no PR
        if: always() && steps.gate.outputs.approved == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.number;
            const outcome = '${{ job.status }}';
            const msg = outcome === 'success'
              ? '‚úÖ CRDA scan conclu√≠do com sucesso. Veja a aba **Security ‚Üí Code scanning alerts**.'
              : '‚ùå CRDA scan falhou. Verifique os logs no **Actions**.';
            await github.rest.issues.createComment({ owner, repo, issue_number: pr, body: msg });
