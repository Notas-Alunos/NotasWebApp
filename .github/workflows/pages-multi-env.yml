name: Pages - prod, develop e PR preview

on:
  push:
    branches:
      - main        # produ√ß√£o
      - develop     # staging da develop
  pull_request:
    types: [opened, synchronize, reopened]  # previews por PR

# IMPORTANTE: nas Settings do repo, ative:
# Settings ‚Üí Actions ‚Üí General ‚Üí Workflow permissions ‚Üí Read and write permissions
permissions:
  contents: write        # necess√°rio para push na gh-pages
  pull-requests: write   # comentar no PR com a URL do preview

concurrency:
  group: pages-${{ github.ref }}   # evita concorr√™ncia por ref
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # manter hist√≥rico completo evita surpresas

      # Opcional, apenas padroniza metadados de Pages
      - name: Setup Pages (opcional)
        uses: actions/configure-pages@v5

      # --- Build do Jekyll ---
      - name: Build com Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      # --- Determinar DESTINO no gh-pages conforme o gatilho ---
      - name: Definir destino de publica√ß√£o (dest_dir)
        id: dest
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "dir=." >> $GITHUB_OUTPUT              # raiz (produ√ß√£o)
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF_NAME}" == "develop" ]]; then
            echo "dir=preview/develop" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            echo "dir=preview/pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            echo "Evento n√£o suportado"; exit 1
          fi
          echo "Destino: $(cat $GITHUB_OUTPUT)"

      # --- Detectar se o PR √© de fork (token fica read-only e o push falha) ---
      - name: Checar se PR √© de fork
        id: forkcheck
        if: github.event_name == 'pull_request'
        run: |
          echo "is_fork=${{ github.event.pull_request.head.repo.fork }}" >> $GITHUB_OUTPUT
          echo "fork_owner=${{ github.event.pull_request.head.repo.owner.login }}" >> $GITHUB_OUTPUT
          echo "fork_repo=${{ github.event.pull_request.head.repo.name }}" >> $GITHUB_OUTPUT

      # --- Publicar no branch gh-pages (pula PR de fork) ---
      - name: Publicar no branch gh-pages
        continue-on-error: true
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.event_name != 'pull_request' || steps.forkcheck.outputs.is_fork == 'false' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: _site
          destination_dir: ${{ steps.dest.outputs.dir }}
          keep_files: true
          force_orphan: false    # necess√°rio com keep_files para preservar outras pastas
          user_name: "github-actions[bot]"
          user_email: "41898282+github-actions[bot]@users.noreply.github.com"

      # --- Comentar a URL do preview no PR (n√£o comenta se for fork) ---
      - name: Comentar URL do preview no PR
        uses: actions/github-script@v7
        if: ${{ github.event_name != 'pull_request' || steps.forkcheck.outputs.is_fork == 'false' }}
        env:
          DEST_DIR: ${{ steps.dest.outputs.dir }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Descobrir PR desta execu√ß√£o
            let prNumber = null;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.number;
            } else if (context.eventName === 'push') {
              const res = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner, repo, commit_sha: context.sha
              });
              const openPR = res.data.find(pr => pr.state === 'open');
              if (openPR) prNumber = openPR.number;
            }
            if (!prNumber) {
              core.info('Nenhum PR associado encontrado; nada a comentar.');
              return;
            }

            const base = `https://${owner}.github.io/${repo}`;
            const dest = process.env.DEST_DIR;
            const url  = dest === '.' ? `${base}/` : `${base}/${dest.replace(/^\/*/, '')}/`;
            const body = `üîç **PR Preview publicado:** ${url}`;
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });

      # --- Se PR for de fork, deixar um coment√°rio explicando por que n√£o publicou ---
      - name: Explicar por que n√£o publicou (fork)
        uses: actions/github-script@v7
        if: ${{ github.event_name == 'pull_request' && steps.forkcheck.outputs.is_fork == 'true' }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNumber = context.payload.number;
            const body = [
              "‚ö†Ô∏è **Preview n√£o publicado**: este PR vem de um *fork*.",
              "",
              "- Por seguran√ßa, o `GITHUB_TOKEN` em PRs de fork tem permiss√µes de leitura, ent√£o o bot n√£o consegue fazer push na `gh-pages`.",
              "- Op√ß√µes:",
              "  1) Rodar o build no reposit√≥rio base ap√≥s criar uma branch local.",
              "  2) Usar `pull_request_target` (com muito cuidado e valida√ß√µes), ou",
              "  3) Habilitar um fluxo alternativo s√≥ para forks (ex.: artifact + deploy manual)."
            ].join("\n");
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
